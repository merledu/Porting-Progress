/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/shayan/zephyrproject/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /chosen
 *   2   /flash@20000000
 *   3   /memory@80000000
 *   4   /soc
 *   5   /cpus
 *   6   /cpus/cpu@0
 *   7   /cpus/cpu@0/interrupt-controller
 *   8   /cpus/cpu@1
 *   9   /cpus/cpu@1/interrupt-controller
 *   10  /cpus/cpu@2
 *   11  /cpus/cpu@2/interrupt-controller
 *   12  /cpus/cpu@3
 *   13  /cpus/cpu@3/interrupt-controller
 *   14  /cpus/cpu@4
 *   15  /cpus/cpu@4/interrupt-controller
 *   16  /cpus/cpu@5
 *   17  /cpus/cpu@5/interrupt-controller
 *   18  /cpus/cpu@6
 *   19  /cpus/cpu@6/interrupt-controller
 *   20  /cpus/cpu@7
 *   21  /cpus/cpu@7/interrupt-controller
 *   22  /soc/interrupt-controller@c000000
 *   23  /uart@10000000
 *   24  /soc/clint@2000000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_flash_20000000) fn(DT_N_S_uart_10000000) fn(DT_N_S_cpus) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc) fn(DT_N_S_chosen)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_flash_20000000, __VA_ARGS__) fn(DT_N_S_uart_10000000, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_80000000, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_flash_20000000) fn(DT_N_S_uart_10000000) fn(DT_N_S_cpus) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc) fn(DT_N_S_chosen) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_flash_20000000, __VA_ARGS__) fn(DT_N_S_uart_10000000, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_80000000, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /chosen */ \
	2, /* /flash@20000000 */ \
	3, /* /memory@80000000 */ \
	4, /* /soc */ \
	5, /* /cpus */ \
	23, /* /uart@10000000 */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_riscv_virtio DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_riscv_virtio 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"riscv-virtio"}
#define DT_N_P_compatible_IDX_0 "riscv-virtio"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /flash@20000000
 *
 * Node identifier: DT_N_S_flash_20000000
 */

/* Node's full path: */
#define DT_N_S_flash_20000000_PATH "/flash@20000000"

/* Node's name with unit-address: */
#define DT_N_S_flash_20000000_FULL_NAME "flash@20000000"

/* Node parent (/) identifier: */
#define DT_N_S_flash_20000000_PARENT DT_N
#define DT_N_S_flash_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_flash_20000000_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_20000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_20000000_EXISTS 1
#define DT_N_INST_0_cfi_flash DT_N_S_flash_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_20000000_REG_NUM 2
#define DT_N_S_flash_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_flash_20000000_REG_IDX_0_VAL_SIZE 33554432 /* 0x2000000 */
#define DT_N_S_flash_20000000_REG_IDX_1_EXISTS 1
#define DT_N_S_flash_20000000_REG_IDX_1_VAL_ADDRESS 570425344 /* 0x22000000 */
#define DT_N_S_flash_20000000_REG_IDX_1_VAL_SIZE 33554432 /* 0x2000000 */
#define DT_N_S_flash_20000000_RANGES_NUM 0
#define DT_N_S_flash_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_20000000_IRQ_NUM 0
#define DT_N_S_flash_20000000_COMPAT_MATCHES_cfi_flash 1
#define DT_N_S_flash_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_20000000_P_reg {536870912 /* 0x20000000 */, 33554432 /* 0x2000000 */, 570425344 /* 0x22000000 */, 33554432 /* 0x2000000 */}
#define DT_N_S_flash_20000000_P_reg_IDX_0 536870912
#define DT_N_S_flash_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_20000000_P_reg_IDX_1 33554432
#define DT_N_S_flash_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_20000000_P_reg_IDX_2 570425344
#define DT_N_S_flash_20000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_flash_20000000_P_reg_IDX_3 33554432
#define DT_N_S_flash_20000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_flash_20000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_20000000, reg, 0) \
	fn(DT_N_S_flash_20000000, reg, 1) \
	fn(DT_N_S_flash_20000000, reg, 2) \
	fn(DT_N_S_flash_20000000, reg, 3)
#define DT_N_S_flash_20000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_20000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_flash_20000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_flash_20000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_flash_20000000, reg, 3, __VA_ARGS__)
#define DT_N_S_flash_20000000_P_reg_EXISTS 1
#define DT_N_S_flash_20000000_P_compatible {"cfi-flash"}
#define DT_N_S_flash_20000000_P_compatible_IDX_0 "cfi-flash"
#define DT_N_S_flash_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_20000000, compatible, 0)
#define DT_N_S_flash_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_20000000_P_compatible_LEN 1
#define DT_N_S_flash_20000000_P_compatible_EXISTS 1

/*
 * Devicetree node: /memory@80000000
 *
 * Node identifier: DT_N_S_memory_80000000
 */

/* Node's full path: */
#define DT_N_S_memory_80000000_PATH "/memory@80000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_80000000_FULL_NAME "memory@80000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_80000000_PARENT DT_N
#define DT_N_S_memory_80000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_80000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_80000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_80000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_80000000_EXISTS 1
#define DT_N_NODELABEL_ram0 DT_N_S_memory_80000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_80000000_REG_NUM 1
#define DT_N_S_memory_80000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_80000000_REG_IDX_0_VAL_ADDRESS 2147483648 /* 0x80000000 */
#define DT_N_S_memory_80000000_REG_IDX_0_VAL_SIZE 268435456 /* 0x10000000 */
#define DT_N_S_memory_80000000_RANGES_NUM 0
#define DT_N_S_memory_80000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_80000000_IRQ_NUM 0
#define DT_N_S_memory_80000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_80000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_80000000_P_reg {2147483648 /* 0x80000000 */, 268435456 /* 0x10000000 */}
#define DT_N_S_memory_80000000_P_reg_IDX_0 2147483648
#define DT_N_S_memory_80000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_IDX_1 268435456
#define DT_N_S_memory_80000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_80000000, reg, 0) \
	fn(DT_N_S_memory_80000000, reg, 1)
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_80000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_80000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_80000000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_clint_2000000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_clint_2000000) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_cpu_2) fn(DT_N_S_cpus_S_cpu_3) fn(DT_N_S_cpus_S_cpu_4) fn(DT_N_S_cpus_S_cpu_5) fn(DT_N_S_cpus_S_cpu_6) fn(DT_N_S_cpus_S_cpu_7)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_2, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_4, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_5, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_6, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_7, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_cpu_2) fn(DT_N_S_cpus_S_cpu_3) fn(DT_N_S_cpus_S_cpu_4) fn(DT_N_S_cpus_S_cpu_5) fn(DT_N_S_cpus_S_cpu_6) fn(DT_N_S_cpus_S_cpu_7) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_2, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_4, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_5, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_6, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_7, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	6, /* /cpus/cpu@0 */ \
	8, /* /cpus/cpu@1 */ \
	10, /* /cpus/cpu@2 */ \
	12, /* /cpus/cpu@3 */ \
	14, /* /cpus/cpu@4 */ \
	16, /* /cpus/cpu@5 */ \
	18, /* /cpus/cpu@6 */ \
	20, /* /cpus/cpu@7 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS \
	7, /* /cpus/cpu@0/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_riscv DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_status "okay"
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, status, 0) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PATH "/cpus/cpu@0/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@0) identifier: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_REQUIRES_ORDS \
	6, /* /cpus/cpu@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_EXISTS 1
#define DT_N_INST_0_riscv_cpu_intc DT_N_S_cpus_S_cpu_0_S_interrupt_controller
#define DT_N_NODELABEL_hlic0       DT_N_S_cpus_S_cpu_0_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_PATH "/cpus/cpu@1"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_FULL_NAME "cpu@1"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_1_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_SUPPORTS_ORDS \
	9, /* /cpus/cpu@1/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_EXISTS 1
#define DT_N_INST_1_riscv DT_N_S_cpus_S_cpu_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_REG_NUM 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_cpus_S_cpu_1_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_P_reg {1 /* 0x1 */}
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0 1
#define DT_N_S_cpus_S_cpu_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, reg, 0)
#define DT_N_S_cpus_S_cpu_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_status "okay"
#define DT_N_S_cpus_S_cpu_1_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_1_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_1_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, status, 0) \
	fn(DT_N_S_cpus_S_cpu_1, status, 1) \
	fn(DT_N_S_cpus_S_cpu_1, status, 2) \
	fn(DT_N_S_cpus_S_cpu_1, status, 3)
#define DT_N_S_cpus_S_cpu_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_1, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@1/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_1_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_PATH "/cpus/cpu@1/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@1) identifier: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_REQUIRES_ORDS \
	8, /* /cpus/cpu@1 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_EXISTS 1
#define DT_N_INST_1_riscv_cpu_intc DT_N_S_cpus_S_cpu_1_S_interrupt_controller
#define DT_N_NODELABEL_hlic1       DT_N_S_cpus_S_cpu_1_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_1_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@2
 *
 * Node identifier: DT_N_S_cpus_S_cpu_2
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_2_PATH "/cpus/cpu@2"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_2_FULL_NAME "cpu@2"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_2_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_2_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_2_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_2_SUPPORTS_ORDS \
	11, /* /cpus/cpu@2/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_2_EXISTS 1
#define DT_N_INST_2_riscv DT_N_S_cpus_S_cpu_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_2_REG_NUM 1
#define DT_N_S_cpus_S_cpu_2_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_REG_IDX_0_VAL_ADDRESS 2 /* 0x2 */
#define DT_N_S_cpus_S_cpu_2_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_2_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_2_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_2_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_2_P_reg {2 /* 0x2 */}
#define DT_N_S_cpus_S_cpu_2_P_reg_IDX_0 2
#define DT_N_S_cpus_S_cpu_2_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, reg, 0)
#define DT_N_S_cpus_S_cpu_2_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_status "okay"
#define DT_N_S_cpus_S_cpu_2_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_2_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_2_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, status, 0) \
	fn(DT_N_S_cpus_S_cpu_2, status, 1) \
	fn(DT_N_S_cpus_S_cpu_2, status, 2) \
	fn(DT_N_S_cpus_S_cpu_2, status, 3)
#define DT_N_S_cpus_S_cpu_2_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_2, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_2_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2, compatible, 0)
#define DT_N_S_cpus_S_cpu_2_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_2_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@2/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_2_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_PATH "/cpus/cpu@2/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@2) identifier: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_2
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_REQUIRES_ORDS \
	10, /* /cpus/cpu@2 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_EXISTS 1
#define DT_N_INST_2_riscv_cpu_intc DT_N_S_cpus_S_cpu_2_S_interrupt_controller
#define DT_N_NODELABEL_hlic2       DT_N_S_cpus_S_cpu_2_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_2_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@3
 *
 * Node identifier: DT_N_S_cpus_S_cpu_3
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_3_PATH "/cpus/cpu@3"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_3_FULL_NAME "cpu@3"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_3_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_3_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_3_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_3_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_3_SUPPORTS_ORDS \
	13, /* /cpus/cpu@3/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_3_EXISTS 1
#define DT_N_INST_3_riscv DT_N_S_cpus_S_cpu_3

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_3_REG_NUM 1
#define DT_N_S_cpus_S_cpu_3_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_REG_IDX_0_VAL_ADDRESS 3 /* 0x3 */
#define DT_N_S_cpus_S_cpu_3_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_3_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_3_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_3_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_3_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_3_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_3_P_reg {3 /* 0x3 */}
#define DT_N_S_cpus_S_cpu_3_P_reg_IDX_0 3
#define DT_N_S_cpus_S_cpu_3_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3, reg, 0)
#define DT_N_S_cpus_S_cpu_3_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_status "okay"
#define DT_N_S_cpus_S_cpu_3_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_3_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_3_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_3_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_3_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_3_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3, status, 0) \
	fn(DT_N_S_cpus_S_cpu_3, status, 1) \
	fn(DT_N_S_cpus_S_cpu_3, status, 2) \
	fn(DT_N_S_cpus_S_cpu_3, status, 3)
#define DT_N_S_cpus_S_cpu_3_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_3, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_3, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_3, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_3_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3, compatible, 0)
#define DT_N_S_cpus_S_cpu_3_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_3_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@3/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_3_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_PATH "/cpus/cpu@3/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@3) identifier: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_3
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_REQUIRES_ORDS \
	12, /* /cpus/cpu@3 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_EXISTS 1
#define DT_N_INST_3_riscv_cpu_intc DT_N_S_cpus_S_cpu_3_S_interrupt_controller
#define DT_N_NODELABEL_hlic3       DT_N_S_cpus_S_cpu_3_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_3_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@4
 *
 * Node identifier: DT_N_S_cpus_S_cpu_4
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_4_PATH "/cpus/cpu@4"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_4_FULL_NAME "cpu@4"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_4_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_4_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_4_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_4_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_4_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_4_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_4_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_4_SUPPORTS_ORDS \
	15, /* /cpus/cpu@4/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_4_EXISTS 1
#define DT_N_INST_4_riscv DT_N_S_cpus_S_cpu_4

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_4_REG_NUM 1
#define DT_N_S_cpus_S_cpu_4_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_REG_IDX_0_VAL_ADDRESS 4 /* 0x4 */
#define DT_N_S_cpus_S_cpu_4_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_4_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_4_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_4_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_4_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_4_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_4_P_reg {4 /* 0x4 */}
#define DT_N_S_cpus_S_cpu_4_P_reg_IDX_0 4
#define DT_N_S_cpus_S_cpu_4_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_4, reg, 0)
#define DT_N_S_cpus_S_cpu_4_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_4_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_P_status "okay"
#define DT_N_S_cpus_S_cpu_4_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_4_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_4_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_4_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_4_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_4_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_4, status, 0) \
	fn(DT_N_S_cpus_S_cpu_4, status, 1) \
	fn(DT_N_S_cpus_S_cpu_4, status, 2) \
	fn(DT_N_S_cpus_S_cpu_4, status, 3)
#define DT_N_S_cpus_S_cpu_4_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_4, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_4, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_4, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_4_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_4_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_4_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_4, compatible, 0)
#define DT_N_S_cpus_S_cpu_4_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_4_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_4_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@4/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_4_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_PATH "/cpus/cpu@4/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@4) identifier: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_4
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_REQUIRES_ORDS \
	14, /* /cpus/cpu@4 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_EXISTS 1
#define DT_N_INST_4_riscv_cpu_intc DT_N_S_cpus_S_cpu_4_S_interrupt_controller
#define DT_N_NODELABEL_hlic4       DT_N_S_cpus_S_cpu_4_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_4_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@5
 *
 * Node identifier: DT_N_S_cpus_S_cpu_5
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_5_PATH "/cpus/cpu@5"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_5_FULL_NAME "cpu@5"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_5_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_5_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_5_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_5_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_5_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_5_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_5_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_5_SUPPORTS_ORDS \
	17, /* /cpus/cpu@5/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_5_EXISTS 1
#define DT_N_INST_5_riscv DT_N_S_cpus_S_cpu_5

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_5_REG_NUM 1
#define DT_N_S_cpus_S_cpu_5_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_REG_IDX_0_VAL_ADDRESS 5 /* 0x5 */
#define DT_N_S_cpus_S_cpu_5_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_5_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_5_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_5_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_5_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_5_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_5_P_reg {5 /* 0x5 */}
#define DT_N_S_cpus_S_cpu_5_P_reg_IDX_0 5
#define DT_N_S_cpus_S_cpu_5_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_5, reg, 0)
#define DT_N_S_cpus_S_cpu_5_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_5_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_P_status "okay"
#define DT_N_S_cpus_S_cpu_5_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_5_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_5_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_5_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_5_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_5_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_5, status, 0) \
	fn(DT_N_S_cpus_S_cpu_5, status, 1) \
	fn(DT_N_S_cpus_S_cpu_5, status, 2) \
	fn(DT_N_S_cpus_S_cpu_5, status, 3)
#define DT_N_S_cpus_S_cpu_5_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_5, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_5, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_5, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_5_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_5_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_5_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_5, compatible, 0)
#define DT_N_S_cpus_S_cpu_5_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_5_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_5_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@5/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_5_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_PATH "/cpus/cpu@5/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@5) identifier: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_5
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_REQUIRES_ORDS \
	16, /* /cpus/cpu@5 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_EXISTS 1
#define DT_N_INST_5_riscv_cpu_intc DT_N_S_cpus_S_cpu_5_S_interrupt_controller
#define DT_N_NODELABEL_hlic5       DT_N_S_cpus_S_cpu_5_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_5_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@6
 *
 * Node identifier: DT_N_S_cpus_S_cpu_6
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_6_PATH "/cpus/cpu@6"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_6_FULL_NAME "cpu@6"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_6_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_6_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_6_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_6_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_6_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_6_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_6_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_6_SUPPORTS_ORDS \
	19, /* /cpus/cpu@6/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_6_EXISTS 1
#define DT_N_INST_6_riscv DT_N_S_cpus_S_cpu_6

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_6_REG_NUM 1
#define DT_N_S_cpus_S_cpu_6_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_REG_IDX_0_VAL_ADDRESS 6 /* 0x6 */
#define DT_N_S_cpus_S_cpu_6_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_6_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_6_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_6_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_6_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_6_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_6_P_reg {6 /* 0x6 */}
#define DT_N_S_cpus_S_cpu_6_P_reg_IDX_0 6
#define DT_N_S_cpus_S_cpu_6_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_6, reg, 0)
#define DT_N_S_cpus_S_cpu_6_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_6_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_P_status "okay"
#define DT_N_S_cpus_S_cpu_6_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_6_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_6_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_6_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_6_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_6_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_6, status, 0) \
	fn(DT_N_S_cpus_S_cpu_6, status, 1) \
	fn(DT_N_S_cpus_S_cpu_6, status, 2) \
	fn(DT_N_S_cpus_S_cpu_6, status, 3)
#define DT_N_S_cpus_S_cpu_6_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_6, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_6, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_6, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_6_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_6_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_6_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_6, compatible, 0)
#define DT_N_S_cpus_S_cpu_6_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_6_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_6_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@6/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_6_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_PATH "/cpus/cpu@6/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@6) identifier: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_6
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_REQUIRES_ORDS \
	18, /* /cpus/cpu@6 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_EXISTS 1
#define DT_N_INST_6_riscv_cpu_intc DT_N_S_cpus_S_cpu_6_S_interrupt_controller
#define DT_N_NODELABEL_hlic6       DT_N_S_cpus_S_cpu_6_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_6_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@7
 *
 * Node identifier: DT_N_S_cpus_S_cpu_7
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_7_PATH "/cpus/cpu@7"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_7_FULL_NAME "cpu@7"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_7_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_7_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_7_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_7_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller) 
#define DT_N_S_cpus_S_cpu_7_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_7_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_7_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_7_SUPPORTS_ORDS \
	21, /* /cpus/cpu@7/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_7_EXISTS 1
#define DT_N_INST_7_riscv DT_N_S_cpus_S_cpu_7

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_7_REG_NUM 1
#define DT_N_S_cpus_S_cpu_7_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_REG_IDX_0_VAL_ADDRESS 7 /* 0x7 */
#define DT_N_S_cpus_S_cpu_7_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_7_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_7_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_7_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_7_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_7_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_7_P_reg {7 /* 0x7 */}
#define DT_N_S_cpus_S_cpu_7_P_reg_IDX_0 7
#define DT_N_S_cpus_S_cpu_7_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_7, reg, 0)
#define DT_N_S_cpus_S_cpu_7_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_7_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_P_status "okay"
#define DT_N_S_cpus_S_cpu_7_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_7_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_7_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_7_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_7_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_7_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_7, status, 0) \
	fn(DT_N_S_cpus_S_cpu_7, status, 1) \
	fn(DT_N_S_cpus_S_cpu_7, status, 2) \
	fn(DT_N_S_cpus_S_cpu_7, status, 3)
#define DT_N_S_cpus_S_cpu_7_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_7, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_7, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_7, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_7_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_7_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_7_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_7, compatible, 0)
#define DT_N_S_cpus_S_cpu_7_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_7_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_7_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@7/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_7_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_PATH "/cpus/cpu@7/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@7) identifier: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_7
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_REQUIRES_ORDS \
	20, /* /cpus/cpu@7 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_SUPPORTS_ORDS \
	22, /* /soc/interrupt-controller@c000000 */ \
	24, /* /soc/clint@2000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_EXISTS 1
#define DT_N_INST_7_riscv_cpu_intc DT_N_S_cpus_S_cpu_7_S_interrupt_controller
#define DT_N_NODELABEL_hlic7       DT_N_S_cpus_S_cpu_7_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_7_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@c000000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_c000000
 *
 * Binding (compatible = sifive,plic-1.0.0):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/sifive,plic-1.0.0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PATH "/soc/interrupt-controller@c000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_c000000_FULL_NAME "interrupt-controller@c000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_c000000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_c000000_REQUIRES_ORDS \
	4, /* /soc */ \
	7, /* /cpus/cpu@0/interrupt-controller */ \
	9, /* /cpus/cpu@1/interrupt-controller */ \
	11, /* /cpus/cpu@2/interrupt-controller */ \
	13, /* /cpus/cpu@3/interrupt-controller */ \
	15, /* /cpus/cpu@4/interrupt-controller */ \
	17, /* /cpus/cpu@5/interrupt-controller */ \
	19, /* /cpus/cpu@6/interrupt-controller */ \
	21, /* /cpus/cpu@7/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_c000000_SUPPORTS_ORDS \
	23, /* /uart@10000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_c000000_EXISTS 1
#define DT_N_INST_0_sifive_plic_1_0_0 DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_NODELABEL_plic           DT_N_S_soc_S_interrupt_controller_c000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NUM 3
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_ADDRESS 201326592 /* 0xc000000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_SIZE 8192 /* 0x2000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_ADDRESS 201334784 /* 0xc002000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_SIZE 2088960 /* 0x1fe000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_ADDRESS 203423744 /* 0xc200000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_SIZE 65011712 /* 0x3e00000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_prio_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_prio_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_irq_en_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_irq_en_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_reg_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_reg_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_NUM 16
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_2_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_3_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_4_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_4_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_5_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_5_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_6_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_6_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_7_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_7_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_8_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_8_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_8_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_9_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_9_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_9_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_10_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_10_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_10_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_11_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_11_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_11_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_12_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_12_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_12_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_13_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_13_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_13_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_14_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_14_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_14_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_15_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_15_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_15_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_MATCHES_sifive_plic_1_0_0 1
#define DT_N_S_soc_S_interrupt_controller_c000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_ndev 53
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_ndev_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg {201326592 /* 0xc000000 */, 8192 /* 0x2000 */, 201334784 /* 0xc002000 */, 2088960 /* 0x1fe000 */, 203423744 /* 0xc200000 */, 65011712 /* 0x3e00000 */}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_0 201326592
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_1 8192
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_2 201334784
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_3 2088960
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_4 203423744
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_5 65011712
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_max_priority 7
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_max_priority_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible {"sifive,plic-1.0.0"}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0 "sifive,plic-1.0.0"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names {"prio", "irq_en", "reg"}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0 "prio"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1 "irq_en"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2 "reg"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_LEN 3
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /uart@10000000
 *
 * Node identifier: DT_N_S_uart_10000000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_uart_10000000_PATH "/uart@10000000"

/* Node's name with unit-address: */
#define DT_N_S_uart_10000000_FULL_NAME "uart@10000000"

/* Node parent (/) identifier: */
#define DT_N_S_uart_10000000_PARENT DT_N
#define DT_N_S_uart_10000000_FOREACH_CHILD(fn) 
#define DT_N_S_uart_10000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_uart_10000000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_uart_10000000_REQUIRES_ORDS \
	0, /* / */ \
	22, /* /soc/interrupt-controller@c000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_uart_10000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_uart_10000000_EXISTS 1
#define DT_N_INST_0_ns16550  DT_N_S_uart_10000000
#define DT_N_NODELABEL_uart0 DT_N_S_uart_10000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_uart_10000000_REG_NUM 1
#define DT_N_S_uart_10000000_REG_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_REG_IDX_0_VAL_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_uart_10000000_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_uart_10000000_RANGES_NUM 0
#define DT_N_S_uart_10000000_FOREACH_RANGE(fn) 
#define DT_N_S_uart_10000000_IRQ_NUM 1
#define DT_N_S_uart_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_IRQ_IDX_0_VAL_irq 2827
#define DT_N_S_uart_10000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_uart_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_uart_10000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_uart_10000000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_uart_10000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_uart_10000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_uart_10000000_P_reg {268435456 /* 0x10000000 */, 256 /* 0x100 */}
#define DT_N_S_uart_10000000_P_reg_IDX_0 268435456
#define DT_N_S_uart_10000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_P_reg_IDX_1 256
#define DT_N_S_uart_10000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_uart_10000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_10000000, reg, 0) \
	fn(DT_N_S_uart_10000000, reg, 1)
#define DT_N_S_uart_10000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_10000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, reg, 1, __VA_ARGS__)
#define DT_N_S_uart_10000000_P_reg_EXISTS 1
#define DT_N_S_uart_10000000_P_reg_shift 0
#define DT_N_S_uart_10000000_P_reg_shift_EXISTS 1
#define DT_N_S_uart_10000000_P_clock_frequency 3686400
#define DT_N_S_uart_10000000_P_clock_frequency_EXISTS 1
#define DT_N_S_uart_10000000_P_label "UART_0"
#define DT_N_S_uart_10000000_P_label_STRING_TOKEN UART_0
#define DT_N_S_uart_10000000_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_uart_10000000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_10000000, label, 0) \
	fn(DT_N_S_uart_10000000, label, 1) \
	fn(DT_N_S_uart_10000000, label, 2) \
	fn(DT_N_S_uart_10000000, label, 3) \
	fn(DT_N_S_uart_10000000, label, 4) \
	fn(DT_N_S_uart_10000000, label, 5)
#define DT_N_S_uart_10000000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_10000000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, label, 5, __VA_ARGS__)
#define DT_N_S_uart_10000000_P_label_EXISTS 1
#define DT_N_S_uart_10000000_P_hw_flow_control 0
#define DT_N_S_uart_10000000_P_hw_flow_control_EXISTS 1
#define DT_N_S_uart_10000000_P_status "okay"
#define DT_N_S_uart_10000000_P_status_STRING_TOKEN okay
#define DT_N_S_uart_10000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_uart_10000000_P_status_ENUM_IDX 1
#define DT_N_S_uart_10000000_P_status_ENUM_TOKEN okay
#define DT_N_S_uart_10000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_uart_10000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_10000000, status, 0) \
	fn(DT_N_S_uart_10000000, status, 1) \
	fn(DT_N_S_uart_10000000, status, 2) \
	fn(DT_N_S_uart_10000000, status, 3)
#define DT_N_S_uart_10000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_10000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, status, 3, __VA_ARGS__)
#define DT_N_S_uart_10000000_P_status_EXISTS 1
#define DT_N_S_uart_10000000_P_compatible {"ns16550"}
#define DT_N_S_uart_10000000_P_compatible_IDX_0 "ns16550"
#define DT_N_S_uart_10000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_10000000, compatible, 0)
#define DT_N_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_10000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_uart_10000000_P_compatible_LEN 1
#define DT_N_S_uart_10000000_P_compatible_EXISTS 1
#define DT_N_S_uart_10000000_P_interrupts {10 /* 0xa */, 1 /* 0x1 */}
#define DT_N_S_uart_10000000_P_interrupts_IDX_0 10
#define DT_N_S_uart_10000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_P_interrupts_IDX_1 1
#define DT_N_S_uart_10000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_uart_10000000, interrupts, 0) \
	fn(DT_N_S_uart_10000000, interrupts, 1)
#define DT_N_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_uart_10000000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_uart_10000000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_uart_10000000_P_interrupts_EXISTS 1
#define DT_N_S_uart_10000000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_uart_10000000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_uart_10000000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_uart_10000000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_uart_10000000_P_interrupt_parent_LEN 1
#define DT_N_S_uart_10000000_P_interrupt_parent_EXISTS 1
#define DT_N_S_uart_10000000_P_wakeup_source 0
#define DT_N_S_uart_10000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/clint@2000000
 *
 * Node identifier: DT_N_S_soc_S_clint_2000000
 *
 * Binding (compatible = riscv,clint0):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,clint0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clint_2000000_PATH "/soc/clint@2000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clint_2000000_FULL_NAME "clint@2000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_clint_2000000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clint_2000000_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clint_2000000_REQUIRES_ORDS \
	4, /* /soc */ \
	7, /* /cpus/cpu@0/interrupt-controller */ \
	9, /* /cpus/cpu@1/interrupt-controller */ \
	11, /* /cpus/cpu@2/interrupt-controller */ \
	13, /* /cpus/cpu@3/interrupt-controller */ \
	15, /* /cpus/cpu@4/interrupt-controller */ \
	17, /* /cpus/cpu@5/interrupt-controller */ \
	19, /* /cpus/cpu@6/interrupt-controller */ \
	21, /* /cpus/cpu@7/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clint_2000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clint_2000000_EXISTS 1
#define DT_N_INST_0_riscv_clint0 DT_N_S_soc_S_clint_2000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clint_2000000_REG_NUM 1
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_ADDRESS 33554432 /* 0x2000000 */
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_clint_2000000_RANGES_NUM 0
#define DT_N_S_soc_S_clint_2000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clint_2000000_IRQ_NUM 16
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_2_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_3_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_4_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_4_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_5_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_5_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_6_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_6_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_7_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_7_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_8_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_8_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_8_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_9_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_9_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_9_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_10_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_10_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_10_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_11_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_11_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_11_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_12_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_12_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_12_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_13_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_13_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_13_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_14_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_14_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_14_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_15_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_15_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_15_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_COMPAT_MATCHES_riscv_clint0 1
#define DT_N_S_soc_S_clint_2000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clint_2000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clint_2000000_P_reg {33554432 /* 0x2000000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_0 33554432
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clint_2000000, reg, 0) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1)
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_interrupt_controller 1
#define DT_N_S_soc_S_clint_2000000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_compatible {"riscv,clint0"}
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0 "riscv,clint0"
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clint_2000000, compatible, 0)
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_compatible_LEN 1
#define DT_N_S_soc_S_clint_2000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_wakeup_source 0
#define DT_N_S_soc_S_clint_2000000_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console           DT_N_S_uart_10000000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_uart_10000000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_80000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_riscv_virtio 1
#define DT_COMPAT_HAS_OKAY_cfi_flash 1
#define DT_COMPAT_HAS_OKAY_ns16550 1
#define DT_COMPAT_HAS_OKAY_riscv 1
#define DT_COMPAT_HAS_OKAY_riscv_cpu_intc 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_sifive_plic_1_0_0 1
#define DT_COMPAT_HAS_OKAY_riscv_clint0 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_riscv_virtio_NUM_OKAY 1
#define DT_N_INST_cfi_flash_NUM_OKAY 1
#define DT_N_INST_ns16550_NUM_OKAY 1
#define DT_N_INST_riscv_NUM_OKAY 8
#define DT_N_INST_riscv_cpu_intc_NUM_OKAY 8
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_sifive_plic_1_0_0_NUM_OKAY 1
#define DT_N_INST_riscv_clint0_NUM_OKAY 1
#define DT_FOREACH_OKAY_riscv_virtio(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_riscv_virtio(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv_virtio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv_virtio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_cfi_flash(fn) fn(DT_N_S_flash_20000000)
#define DT_FOREACH_OKAY_VARGS_cfi_flash(fn, ...) fn(DT_N_S_flash_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_cfi_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_cfi_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16550(fn) fn(DT_N_S_uart_10000000)
#define DT_FOREACH_OKAY_VARGS_ns16550(fn, ...) fn(DT_N_S_uart_10000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16550(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ns16550(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv(fn) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_1) fn(DT_N_S_cpus_S_cpu_2) fn(DT_N_S_cpus_S_cpu_3) fn(DT_N_S_cpus_S_cpu_4) fn(DT_N_S_cpus_S_cpu_5) fn(DT_N_S_cpus_S_cpu_6) fn(DT_N_S_cpus_S_cpu_7)
#define DT_FOREACH_OKAY_VARGS_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_2, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_3, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_4, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_5, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_6, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_7, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv(fn) fn(0) fn(1) fn(2) fn(3) fn(4) fn(5) fn(6) fn(7)
#define DT_FOREACH_OKAY_INST_VARGS_riscv(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__) fn(5, __VA_ARGS__) fn(6, __VA_ARGS__) fn(7, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv_cpu_intc(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller)
#define DT_FOREACH_OKAY_VARGS_riscv_cpu_intc(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_1_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_2_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_3_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_4_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_5_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_6_S_interrupt_controller, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_7_S_interrupt_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv_cpu_intc(fn) fn(0) fn(1) fn(2) fn(3) fn(4) fn(5) fn(6) fn(7)
#define DT_FOREACH_OKAY_INST_VARGS_riscv_cpu_intc(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__) fn(5, __VA_ARGS__) fn(6, __VA_ARGS__) fn(7, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_sifive_plic_1_0_0(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000)
#define DT_FOREACH_OKAY_VARGS_sifive_plic_1_0_0(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_sifive_plic_1_0_0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_sifive_plic_1_0_0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv_clint0(fn) fn(DT_N_S_soc_S_clint_2000000)
#define DT_FOREACH_OKAY_VARGS_riscv_clint0(fn, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv_clint0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv_clint0(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
